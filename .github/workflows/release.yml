name: Release

on:
  push:
    branches: [ master ]

jobs:
  release:
    name: Release extension to Marketplace
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'release:trigger')"
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: clean install dependencies
        run: npm ci

      - name: fetch all history and tags for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion
        uses: gittools/actions/gitversion/setup@v0.9.4
        with:
          versionSpec: '5.2.x'

      - name: execute gitversion
        id: gitversion-before
        uses: gittools/actions/gitversion/execute@v0.9.4

      - name: print gitversion before release
        run: |
          echo "Major: ${{ steps.gitversion-before.outputs.major }}"
          echo "Minor: ${{ steps.gitversion-before.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion-before.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion-before.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion-before.outputs.semVer }}"

      - name: update version in package.json
        run: |
          sed -e '/"version"/s/: ".*"/: "${{ steps.gitversion-before.outputs.semVer }}"/' package.json | tee package.json.modified
          mv package.json.modified package.json

      - name: compile and create vsix
        run: npm run package

      - name: zip vsix package
        run: >
          zip -j
          plastic-scm-${{ steps.gitversion-before.outputs.semVer }}.vsix.zip
          plastic-scm-${{ steps.gitversion-before.outputs.semVer }}.vsix

      - name: publish to marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: npm run deploy

      - name: create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion-before.outputs.semVer }}
          release_name: v${{ steps.gitversion-before.outputs.semVer }}
          draft: false
          prerelease: false

      - name: upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./plastic-scm-${{ steps.gitversion-before.outputs.semVer }}.vsix.zip
          asset_name: plastic-scm-${{ steps.gitversion-before.outputs.semVer }}.vsix.zip
          asset_content_type: application/zip

      - name: fetch new tag for gitversion
        run: git fetch --prune --unshallow

      - name: bump version by using an empty commit
        run: |
          git config --global user.name 'Plastic SCM Releases'
          git config --global user.email 'support@codicesoftware.com'
          git commit --allow-empty -s -m 'Empty commit to bump version (ci skip)'

      - name: execute gitversion again
        id: gitversion-after
        uses: gittools/actions/gitversion/execute@v0.9.4

      - name: print gitversion after release
        run: |
          echo "Major: ${{ steps.gitversion-after.outputs.major }}"
          echo "Minor: ${{ steps.gitversion-after.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion-after.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion-after.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion-after.outputs.semVer }}"

      - name: update new version in package.json
        run: |
          sed -e '/"version"/s/: ".*"/: "${{ steps.gitversion-after.outputs.semVer }}"/' package.json | tee package.json.modified
          mv package.json.modified package.json

      - name: commit updated package.json
        run: |
          git add package.json
          git commit --no-verify -s -m '[Automatic] Bump version name (ci skip)'

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
